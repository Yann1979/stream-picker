import express from 'express';
import cors from 'cors';
import morgan from 'morgan';
import fetch from 'node-fetch';

const app = express();
app.use(cors());
app.use(express.json());
app.use(morgan('dev'));

const TMDB_URL = 'https://api.themoviedb.org/3';
const TMDB_AUTH = `Bearer ${process.env.TMDB_BEARER_TOKEN}`;
const REGION = process.env.WATCH_REGION || 'FR';
const LANG = process.env.LANG || 'fr-FR';

async function tfetch(path, params = {}) {
  const url = new URL(TMDB_URL + path);
  Object.entries(params).forEach(([k, v]) => {
    if (v !== undefined && v !== null && v !== '') url.searchParams.set(k, v);
  });
  const res = await fetch(url, {
    headers: { Authorization: TMDB_AUTH, Accept: 'application/json' },
  });
  if (!res.ok) {
    const text = await res.text();
    throw new Error(`TMDB ${res.status} ${res.statusText}: ${text}`);
  }
  return res.json();
}

app.get('/api/search', async (req, res) => {
  try {
    const typeParam = (req.query.type || 'any').toString().toLowerCase();
    const qType =
      typeParam === 'film'
        ? 'movie'
        : typeParam === 'série' || typeParam === 'serie'
        ? 'tv'
        : 'any';

    const params = {
      language: LANG,
      watch_region: REGION,
      sort_by: 'popularity.desc',
      with_watch_monetization_types: 'flatrate|free|ads',
      page: 1,
    };

    if (req.query.original_language) {
      params.with_original_language = req.query.original_language;
    }
    if (req.query.year_from) {
      params['primary_release_date.gte'] = `${req.query.year_from}-01-01`;
      params['first_air_date.gte'] = `${req.query.year_from}-01-01`;
    }
    if (req.query.year_to) {
      params['primary_release_date.lte'] = `${req.query.year_to}-12-31`;
      params['first_air_date.lte'] = `${req.query.year_to}-12-31`;
    }

    async function discover(kind) {
      const path = kind === 'movie' ? '/discover/movie' : '/discover/tv';
      const data = await tfetch(path, params);
      return data.results.map((r) => ({
        id: r.id,
        type: kind === 'movie' ? 'film' : 'série',
        title: r.title || r.name,
        year: (r.release_date || r.first_air_date || '').slice(0, 4),
        poster: r.poster_path
          ? `https://image.tmdb.org/t/p/w342${r.poster_path}`
          : null,
        rating: r.vote_average,
        overview: r.overview,
      }));
    }

    let results = [];
    if (qType === 'movie') {
      results = await discover('movie');
    } else if (qType === 'tv') {
      results = await discover('tv');
    } else {
      const [movies, series] = await Promise.all([
        discover('movie'),
        discover('tv'),
      ]);
      results = [...movies, ...series];
    }

    res.json({ results });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

import path from 'path';
import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
app.use('/', express.static(path.join(__dirname, '..', 'web')));

const PORT = process.env.PORT || 8787;
app.listen(PORT, () => console.log(`✅ Serveur sur http://localhost:${PORT}`));